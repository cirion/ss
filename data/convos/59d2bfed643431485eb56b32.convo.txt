idRef {
  id: "59d2bfed643431485eb56b32"
}
ui_name: "ss_a6_treasure_s1-Upstairs_Terminal"
nodes {
  idRef {
    id: "59d2bffd643431485eb56b3e"
  }
  index: 0
  text: "> Terminal locked."
  branches {
    responseText: "{{GM}}Log in.{{/GM}}"
    nextNodeIndex: 1
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c007643431485eb56b45"
    }
  }
  branches {
    responseText: "{{CC}}Decking: $(story.Global-Skillcheck_Hard){{/CC}} {{GM}}Brute-force the login.{{/GM}}"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "58a09a016666641898001ad5"
            }
            args {
              string_value: "Global-Skillcheck_Hard"
            }
          }
        }
      }
    }
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c007643431485eb56b47"
    }
    auxiliaryLink: true
    comment: "TODO: Am I doing suspicion?"
  }
  branches {
    responseText: "Kora, can you help with this?"
    nextNodeIndex: 2
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c007643431485eb56b49"
    }
    comment: "TODO: Kora in region"
  }
  branches {
    responseText: "{{GM}}Log out.{{/GM}}"
    nextNodeIndex: -1
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c06c643431485eb56b74"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c07a643431485eb56b77"
  }
  index: 1
  text: "Password required."
  branches {
    responseText: "Camelot"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c090643431485eb56b79"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Beaumont"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c090643431485eb56b7b"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Saito"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c091643431485eb56b7d"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Purity"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c091643431485eb56b7f"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Human Nation"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c0af643431485eb56b81"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_InputKeyboard
}
nodes {
  idRef {
    id: "59d2c04f643431485eb56b5c"
  }
  index: 2
  text: "Sure!\n\n{{GM}}She chats absent-mindedly while tapping away.{{/GM}}\n\nProtectorate data security is hella rigid. Pretty good metaphor for their whole operation, really. Strong barriers, but nothing backing it up. Once you slip past it, there\342\200\231s nothing else stopping you.\n\nSpeaking of which: okay, you\342\200\231re in!"
  branches {
    responseText: ""
    actions {
      ops {
        functionName: "Play Animation From Manifest"
        args {
          call_value {
            functionName: "Nearest Tagged Actor to Actor"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isKora"
                }
              }
            }
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Animation)"
            args {
              string_value: "HongKong:General/standing_jackout_decking"
            }
          }
        }
      }
    }
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c051643431485eb56b5e"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isKora"
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "HongKong:props"
          }
          args {
            string_value: "BBS_Typing"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isKora"
              }
            }
          }
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/decking_idle"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2c0b9643431485eb56b84"
  }
  index: 3
  text: "> Please select an option from the menu."
  branches {
    responseText: "{{GM}}View personnel records.{{/GM}}"
    conditions {
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "ss_a6_treasure_s1-GavanRecords"
            }
          }
        }
      }
    }
    nextNodeIndex: 4
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c0e2643431485eb56bab"
    }
  }
  branches {
    responseText: "{{GM}}View messages.{{/GM}}"
    nextNodeIndex: 40
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cce4643431d3603d1da1"
    }
  }
  branches {
    responseText: "{{GM}}Log out.{{/GM}}"
    nextNodeIndex: -1
    idRef {
      id: "59d2bfed643431485eb56b32:59d2ce1e643431d3603d21db"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c0fd643431485eb56bae"
  }
  index: 4
  text: "You browse through a list of data entries. Several catch your eye."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c110643431485eb56bb0"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "59d2c112643431485eb56bb3"
  }
  index: 5
  text: ""
  branches {
    responseText: "{{GM}}View status message.{{/GM}}"
    nextNodeIndex: 6
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c11c643431485eb56bd1"
    }
  }
  branches {
    responseText: "{{GM}}View record details: Ingress: Gavan Morgan.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Upstairs_ReadRecord"
            }
          }
        }
      }
    }
    nextNodeIndex: 9
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c136643431485eb56be0"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Gavan Morgan.{{/GM}}"
    nextNodeIndex: 12
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c235643431485eb56d07"
    }
  }
  branches {
    responseText: "{{GM}}View record details: Ingress: Olivia Morgan.{{/GM}}"
    nextNodeIndex: 15
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c2bf643431485eb56daa"
    }
  }
  branches {
    responseText: "{{GM}}View record details: Ingress: Stephen Morgan.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Upstairs_ReadRecord"
            }
          }
        }
      }
    }
    nextNodeIndex: 18
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c355643431485eb56e95"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Gavan Morgan.{{/GM}}"
    nextNodeIndex: 21
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c41d643431485eb5702a"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Stephen Morgan.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Upstairs_ReadRecord"
            }
          }
        }
      }
    }
    nextNodeIndex: 22
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c452643431485eb570f4"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Stephen Morgan.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Upstairs_ReadRecord"
            }
          }
        }
      }
    }
    nextNodeIndex: 27
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c4f5643431485eb572cb"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Stephen Morgan.{{/GM}}"
    nextNodeIndex: 30
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c581643431485eb574c9"
    }
  }
  branches {
    responseText: "{{GM}}View record update: Olivia Morgan.{{/GM}}"
    nextNodeIndex: 34
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c617643431485eb57623"
    }
  }
  branches {
    responseText: "{{GM}}Back.{{/GM}}"
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cc21643431485eb57840"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "Loop: View personnel records"
}
nodes {
  idRef {
    id: "59d2c120643431485eb56bd4"
  }
  index: 6
  text: ">>From: Treasure Island HR Division, Personnel Department, Bookkeeping Office\n>>To: <listsrv: <all_personnel> >\n>>Subject: Consolidation complete\n> We wish to acknowledge the hard work of our IT department, who have been working around the clock to merge the existing personnel records for the Japanese Imperial State Marines and the former California Free State. Our new unified system for the California Protectorate represents our complete union, and lays the groundwork for the exciting work that lies ahead of us."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 7
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c126643431485eb56bd6"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 8
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c127643431485eb56bda"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c127643431485eb56bd8"
  }
  index: 7
  text: "You can practically hear them salivating at the prospect of more bureaucracy and record-keeping."
  branches {
    responseText: ""
    nextNodeIndex: 8
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c16f643431485eb56c15"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isMasato"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c136643431485eb56bde"
  }
  index: 8
  text: "> In most cases, accumulated benefits and seniority have carried over to the new system. Please review your records and those of your direct dependents. Contact us immediately with any discrepancies."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c191643431485eb56c26"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c138643431485eb56be2"
  }
  index: 9
  text: "> Name: Gavan Morgan\n> SIN: AG72-54BX-P36N\n> Date of Birth: 10 October 2003\n> Classification: Human.\n> Blood type: A+\n> Entry to CalFree system: 10 October 2008\n> Entered under the authority of: Irvin Morgan\n> Role: Heir\n> Benefits: Full"
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c138643431485eb56be4"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c199643431485eb56c6c"
  }
  index: 10
  text: "An attached image is heavily pixelated but legible. It shows a curly-haired young boy, looking curiously at the camera."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isArelia"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 11
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c199643431485eb56c6e"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c1ef643431485eb56cd0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c1a6643431485eb56c72"
  }
  index: 11
  text: "Awww!\n\n{{GM}}She smiles at the image on the screen.{{/GM}}\n\nI know he\342\200\231s our enemy now, but\342\200\246 he started out all right, didn\342\200\231t he? Maybe if he\342\200\231d taken a different path, he might be walking by our sides now."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c1a6643431485eb56c74"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isArelia"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c235643431485eb56d09"
  }
  index: 12
  text: "IDENTIFYING FIELDS\n===\nName: Gavan Morgan\nSIN: AG72-54BX-P36N\n\nUPDATED FIELDS\n===\nRole: Senior advisor\nClearance: Top Secret"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 13
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c235643431485eb56d0b"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c294643431485eb56d25"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c235643431485eb56d0d"
  }
  index: 13
  text: "Moving up in the world. I\342\200\231ve seen the type: groomed since birth to succeed, given every advantage, firmly moved up the ladder as quickly as possible."
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c235643431485eb56d0f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isMasato"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c294643431485eb56d27"
  }
  index: 14
  text: "An attached image shows an arrogant-looking young man disdainfully staring into the camera."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c294643431485eb56d29"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2c2e9643431485eb56dad"
  }
  index: 15
  text: "> Name: Olivia Morgan\n> SIN: D08N-47AX-LL32\n> Alternate names: Olivia Villiers\n> Date of Birth: 16 May 2022\n> Classification: Human\n> Blood type: A+\n> Entry to CalFree system: 12 May 2041\n> Entered under the authority of: Gavan Morgan\n> Role: Spouse\n> Benefits: Contingent"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 16
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c318643431485eb56deb"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 17
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c328643431485eb56df2"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c324643431485eb56dee"
  }
  index: 16
  text: "She was young. Could it have been love?"
  branches {
    responseText: ""
    nextNodeIndex: 17
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c326643431485eb56df0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isKora"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c328643431485eb56df4"
  }
  index: 17
  text: "An attached image shows a pale young woman with long dark hair, half of a smile frozen on her face in the instant this picture was taken."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c328643431485eb56df6"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c3bf643431485eb56edd"
  }
  index: 18
  text: "> Name: Stephen Morgan\n> SIN: AGDN-9CV4-03WW\n> Date of Birth: 3 November 2042\n> Classification: Human\n> Blood type: O+\n> Entry to CalFree system: 4 November 2047\n> Entered under the authority of: Gavan Morgan\n> Role: Heir\n> Benefits: Full"
  branches {
    responseText: ""
    nextNodeIndex: 19
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c3dc643431485eb56f25"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c3ec643431485eb56f28"
  }
  index: 19
  text: "An attached image shows a chubby young boy with curly hair, fascinated by something slightly to the right of the camera."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 20
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c3f9643431485eb56f72"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c3fa643431485eb56f74"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2c401643431485eb56fd6"
  }
  index: 20
  text: "Aww! He has his father\342\200\231s hair and his mother\342\200\231s eyes!"
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c403643431485eb56fd8"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isArelia"
}
nodes {
  idRef {
    id: "59d2c429643431485eb5702d"
  }
  index: 21
  text: "IDENTIFYING FIELDS\n===\nName: Gavan Morgan\nSIN: AG72-54BX-P36N\n\nUPDATED FIELDS\n===\nLegislative access: Granted\nMilitary access: Granted"
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c42d643431485eb5702f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2c454643431485eb570f7"
  }
  index: 22
  text: "IDENTIFYING FIELDS\n===\nName: Stephen Morgan\nSIN: AGDN-9CV4-03WW\n\nUPDATED FIELDS\n===\nClassification: Troll\nBenefits: Contingent"
  branches {
    responseText: ""
    nextNodeIndex: 23
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c457643431485eb570f9"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c457643431485eb570fb"
  }
  index: 23
  text: "An attached image shows a startled-looking teenager. Horns have displaced his previous curly hair. A pair of too-small glasses pinch the middle of a large face."
  branches {
    responseText: ""
    nextNodeIndex: 24
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c460643431485eb570ff"
    }
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c460643431485eb57101"
  }
  index: 24
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isIsas"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 25
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c462643431485eb57103"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isKora"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 26
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c4b0643431485eb571c6"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 5
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c4b2643431485eb571d2"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "Crew reactions"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c462643431485eb57105"
  }
  index: 25
  text: "See? All one are! A troll from a human can spring. He the same person is: the shell only has changed, the heart remains."
  branches {
    responseText: ""
    nextNodeIndex: 24
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c4a6643431485eb571bb"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isIsas"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c4b0643431485eb571c8"
  }
  index: 26
  text: "Goblinization is rare these days, but it still happens. Even to the scions of human-supremacist plotters.\n\nI\342\200\231d like to think that it\342\200\231s cosmic justice, but I don\342\200\231t see this particular story ending well."
  branches {
    responseText: ""
    nextNodeIndex: 24
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c4b0643431485eb571ca"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isKora"
}
nodes {
  idRef {
    id: "59d2c502643431485eb572ce"
  }
  index: 27
  text: "IDENTIFYING FIELDS\n===\nName: Stephen Morgan\nSIN: AGDN-9CV4-03WW\n\nUPDATED FIELDS\n===\nBenefits: None\nStatus: Criminal: Kill on sight\nCrime: <<Data not available>>\nAuthorization: Gavan Morgan, SIN AG72-54BX-P36N"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isIsas"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 28
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c504643431485eb572d0"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c513643431485eb572d8"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c505643431485eb572d2"
  }
  index: 28
  text: "No!"
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c505643431485eb572d4"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isIsas"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c513643431485eb572da"
  }
  index: 29
  text: "An attached image shows a surly troll. His body has grown larger, and his glasses now appear comically small. He is wearing a T-Shirt emblazoned with the words \342\200\234KNIGHTS OF RAGE WORLD TOUR 2059\342\200\235."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c513643431485eb572dc"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2c583643431485eb574cc"
  }
  index: 30
  text: "IDENTIFYING FIELDS\n===\nName: Stephen Morgan\nSIN: AGDN-9CV4-03WW\n\nUPDATED FIELDS\n===\nDate of Death: 16 January 2061\nCause of death: State"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isArelia"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "58a09a016666641898001ad5"
            }
            args {
              string_value: "Global-AreliaLoveTalks"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    nextNodeIndex: 31
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c584643431485eb574ce"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isArelia"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 32
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c595643431485eb574d6"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 33
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c598643431485eb574df"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c584643431485eb574d0"
  }
  index: 31
  text: "She lays a hand on your shoulder. You can feel her trembling. Looking up, you see her eyes filling with tears."
  branches {
    responseText: ""
    nextNodeIndex: 33
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c593643431485eb574d4"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
  sourceWithTagInScene: "isArelia"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c595643431485eb574d8"
  }
  index: 32
  text: "She wipes away a tear but says nothing."
  branches {
    responseText: ""
    nextNodeIndex: 33
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c595643431485eb574da"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
  sourceWithTagInScene: "isArelia"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2c598643431485eb574e1"
  }
  index: 33
  text: "An attached image shows a close-up of a troll\342\200\231s face, a bullet hole between his eyes."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "59d2bfed643431485eb56b32:59d2c598643431485eb574e3"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Event_Upstairs_ReadRecord"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2cb79643431485eb576a1"
  }
  index: 34
  text: "IDENTIFYING FIELDS\n===\nName: Olivia Morgan\nSIN: D08N-47AX-LL32\n\nUPDATED FIELDS\n===\nBenefits: Suspended\nStatus: Fugitive\nAuthorization: Gavan Morgan, SIN AG72-54BX-P36N"
  branches {
    responseText: ""
    nextNodeIndex: 35
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cb7b643431485eb576a3"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cb7c643431485eb576a5"
  }
  index: 35
  text: "An attached image shows a demure lady with long dark hair. Judging from her fashion, you suspect that it was taken several years ago."
  branches {
    responseText: ""
    nextNodeIndex: 36
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cb7c643431485eb576a7"
    }
  }
  nodeType: ConversationNodeType_GM_Speaker_Voice
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cb95643431485eb576ab"
  }
  index: 36
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 37
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cb95643431485eb576ad"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isKora"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 38
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cbd1643431485eb5773f"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isIsas"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 39
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cbd3643431485eb5774b"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 5
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cbda643431485eb57753"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "Crew reactions"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cb97643431485eb576af"
  }
  index: 37
  text: "The one that got away."
  branches {
    responseText: ""
    nextNodeIndex: 36
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cb97643431485eb576b1"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isMasato"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cbd1643431485eb57741"
  }
  index: 38
  text: "I can\342\200\231t blame her for running. Just imagine what it must have been like in their home."
  branches {
    responseText: ""
    nextNodeIndex: 36
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cbd1643431485eb57743"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isKora"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cbd3643431485eb5774d"
  }
  index: 39
  text: "She peace hopefully will find. She young is. She a full life yet may live."
  branches {
    responseText: ""
    nextNodeIndex: 36
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cbd3643431485eb5774f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isIsas"
}
nodes {
  idRef {
    id: "59d2ccfd643431d3603d1da4"
  }
  index: 40
  text: "Most of the messages deal with inconsequential details of the Protectorate administration. But one recent message to Gavan Morgan catches your attention."
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd04643431d3603d1da6"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd05643431d3603d1da8"
  }
  index: 41
  text: ">>From: <<UNKNOWN_SENDER>>\n>>To: Mr. Gavan Morgan\n>>Subject: Accomplishments and rumors\n> We believe in recognizing good work, and wish to formally congratulate you on the remarkable success you have contributed to. The California Protectorate is young, and already sets a wonderful example for the rest of the world to follow."
  branches {
    responseText: ""
    nextNodeIndex: 42
    idRef {
      id: "59d2bfed643431485eb56b32:59d6d1f2356564484200682e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d6d1f53565644842006831"
  }
  index: 42
  text: "> Compared with the previous California Free State administration, you have already achieved a decline of 1.6% in the elf population, 1.9% in the dwarf, 2.2% in the troll, and an impressive 4.6% in the ork. We are encouraged to see that the rates of decline are accelerating, and we have every reason to believe that our mutual goal of 100% compliance will be achieved in the coming years."
  branches {
    responseText: ""
    nextNodeIndex: 43
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd05643431d3603d1daa"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd22643431d3603d1dae"
  }
  index: 43
  text: "> We feel proud of your work, and pleased with our own contribution to the same. Our investment has been immense: not only the large sums of money disbursed, but providing political support from other nations, sympathetic coverage from the news media, and sharing our own previous research on the subject. We made such investments expecting them to be repaid in results, and you have delivered."
  branches {
    responseText: ""
    nextNodeIndex: 44
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd22643431d3603d1db0"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd26643431d3603d1db4"
  }
  index: 44
  text: "> Nonetheless, our investment also gives us ownership over your actions, and we have heard disturbing rumors recently about your lack of purity. As you well know, anyone associated with Human Nation must be wholly devoted to our cause. Not only your body, but your family and associations must be kept free from any hint of a taint. Humanity alone can save humanity."
  branches {
    responseText: ""
    nextNodeIndex: 45
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd26643431d3603d1db6"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd28643431d3603d1db8"
  }
  index: 45
  text: "> No half measures."
  branches {
    responseText: ""
    nextNodeIndex: 46
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd28643431d3603d1dba"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd2b643431d3603d1dbc"
  }
  index: 46
  text: "> We must prove to the world that pure humanity will triumph. A flawed instrument will pollute our victory. Far better to discard such an instrument and start afresh than to continue on a course that will be forever questioned."
  branches {
    responseText: ""
    nextNodeIndex: 47
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd2b643431d3603d1dbe"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd2d643431d3603d1dc0"
  }
  index: 47
  text: "> We will shortly begin a thorough evaluation of this matter, and hope to find no evidence that would give weight to these disturbing rumors. Once the allegations have been disposed of, we will resume our association and advance to the next phase of the great plan. Best regards."
  branches {
    responseText: ""
    nextNodeIndex: 48
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd2d643431d3603d1dc2"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2cd8f643431d3603d1f03"
  }
  index: 48
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isMasato"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 49
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd91643431d3603d1f05"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isIsas"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 50
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda2643431d3603d1f16"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isArelia"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 51
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f22"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isKora"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 52
    onlyOnce: true
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f2a"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cdab643431d3603d1f3a"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "Crew reactions"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cd93643431d3603d1f07"
  }
  index: 49
  text: "Wow! Those guys are the WORST! They can\342\200\231t even treat their own awful people decently."
  branches {
    responseText: ""
    nextNodeIndex: 48
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cd93643431d3603d1f09"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isMasato"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cda2643431d3603d1f18"
  }
  index: 50
  text: "Such efforts inevitably must fail. We one body are. When we a limb chop off, we the body damage, not improve."
  branches {
    responseText: ""
    nextNodeIndex: 48
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda2643431d3603d1f1a"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isIsas"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f24"
  }
  index: 51
  text: "I just\342\200\246 can\342\200\231t understand how anyone can possibly be so COLD. So emotionless. When talking about all of this!\n\nIt\342\200\231s\342\200\246 do they really not see us as people? At all? Just some abstract threat that needs to be eliminated?"
  branches {
    responseText: ""
    nextNodeIndex: 48
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f26"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isArelia"
}
nodes {
  idRef {
    id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f2c"
  }
  index: 52
  text: "This is hella terrifying.\n\nHuman Nation seems to be behind what Saito is doing in California, but this isn\342\200\231t their only play. And it sounds like they\342\200\231re skilled at suppressing information they don\342\200\231t want widely known.\n\nThe People\342\200\231s University needs to get the word out, spread this message, let people around the world know about the danger we\342\200\231re all in."
  branches {
    responseText: ""
    nextNodeIndex: 48
    idRef {
      id: "59d2bfed643431485eb56b32:59d2cda5643431d3603d1f2e"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isKora"
}
roots {
  nextNodeIndex: 0
  idRef {
    id: "59d2bfed643431485eb56b32:59d2bfed643431485eb56b36"
  }
}
speaker_override_id: "55897a5a613464581a001ad8"
