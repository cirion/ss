idRef {
  id: "59d2aab76434310359b56fdf"
}
ui_name: "ss_a6_treasure_s1-Upstairs_Beaumont"
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56688"
  }
  index: 0
  text: "{{GM}}The man looks up at you icily as your team approaches.{{/GM}}\n\nWell. I might have finally found what I was looking for. The infection within the Protectorate, the cancer eating it from within."
  branches {
    nextNodeIndex: 1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56689"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668a"
  }
  index: 1
  text: ""
  branches {
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isIsas"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 2
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668b"
    }
  }
  branches {
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isArelia"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 3
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668e"
    }
  }
  branches {
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isKora"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "59505a14356564f86e006023"
            }
          }
        }
      }
    }
    nextNodeIndex: 4
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56691"
    }
  }
  branches {
    nextNodeIndex: 5
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56694"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Reactions to crew"
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668c"
  }
  index: 2
  text: "{{GM}}He points at Isas.{{/GM}}\n\nA DEMON. I give you credit for showing your true form. Too many metahumans play at being people, try to con us into thinking you\342\200\231re just the same.\n\nBut I know the truth. You have no soul, and exist solely to cause us harm."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668d"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Order Actor to Face Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isIsas"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Triggering Actor"
                }
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_interact"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5668f"
  }
  index: 3
  text: "{{GM}}He looks at Arelia.{{/GM}}\n\nThose tusks, those horns, that skin\342\200\246 I still do not understand how trolls can continue to reproduce now that SURGE has finally abated. Who would possibly be willing to kiss that jagged mouth? Who would stroke that rocky flesh? How can you creatures copulate without vomiting in revulsion?\n Even you must understand how hideous you are."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56690"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Order Actor to Face Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isArelia"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Triggering Actor"
                }
              }
            }
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56692"
  }
  index: 4
  text: "{{GM}}He peers down at Kora, pretending to notice her for the first time.{{/GM}}\n\nA mouse! A mouse has snuck into my room!\n\nNo\342\200\246 my mistake. This is no mouse: it is a rat. Tiny, greedy, filthy, fat, disease-ridden. Contributing absolutely nothing to society, only scavenging the scraps of those who actually produce."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56693"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Order Actor to Face Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isKora"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Triggering Actor"
                }
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_summon"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56695"
  }
  index: 5
  text: "And you\342\200\246\n\n{{GM}}His eyes narrow, considering.{{/GM}}"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Race"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Race"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    nextNodeIndex: 6
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56696"
    }
    comment: "PC0 human"
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Race"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Race"
            }
            args {
              int_value: 3
            }
          }
        }
      }
    }
    nextNodeIndex: 7
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56699"
    }
    comment: "PC0 ork"
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Race"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Race"
            }
            args {
              int_value: 4
            }
          }
        }
      }
    }
    nextNodeIndex: 8
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669c"
    }
    comment: "PC0 troll"
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Race"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Race"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 9
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669f"
    }
    comment: "PC0 dwarf"
  }
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a2"
    }
    comment: "Default: PC0 elf"
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Order Actor to Face Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56697"
  }
  index: 6
  text: "You could be the ugliest $(l.man) in the entire world, and you would still seem a vision of beauty next to these beasts.\n\nIs that why you travel in their company? To accentuate the perfection of humanity, when set against the grotesqueries inflicted by the metagene?"
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56698"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669a"
  }
  index: 7
  text: "I used to find orks disgusting. I do not even notice you any more. You are a plague that has spread across the world, every one of you interchangeable, every one of you worthless.\n\nWe had a chance to cleanse you from this world years ago, and I will ensure the next opportunity does not pass us by."
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669d"
  }
  index: 8
  text: "Can it speak? I wonder. Everyone knows that trolls are as stupid as the rocks they resemble. Genetically inferior, even more inferior than the beastlike orks. Forever held back by your very DNA, a ceiling placed on your mental and social development, and a very low ceiling indeed."
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb5669e"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a0"
  }
  index: 9
  text: "Do you enjoy playing at being human? I\342\200\231ve seen you and your kind enough to know how you operate. You think that if you gather in our shadows, stay beneath our notice, you can behave like humans, speak like humans, and one day be treated like humans.\n\nNo.\n\nYou are monsters. And not even frightening monsters like your cousins. Pathetic monsters, ones we can crush beneath our heel without even noticing."
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a1"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a3"
  }
  index: 10
  text: "Did you expect me to bow? Praise your grace, your beauty, your refinement?\n\n{{GM}}He sneers.{{/GM}}\n\nFools may be led astray, but we all know the truth. Daisy-eaters seek to manipulate and seduce the affairs of mankind, because they lack the ability to actually create anything. You are a corrupt reflection of ourselves, beings with no souls, mistakes that must be eliminated."
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a4"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a5"
  }
  index: 11
  text: "{{GM}}He slams his fist into his thigh, grimacing.{{/GM}}\n\nFirst I am delayed in my arrival. Then I am insulted by the commander. Then I am foisted off into this miserable room, with no competent help for my work.\n\nAnd now, after all that, I am visited by a freak show of horrors.\n\nWhat. Are. You. Doing. Here?"
  branches {
    responseText: "{{CC}}Etiquette: Academic{{/CC}} I heard that you have an interest in phrenology. I thought you might be curious to inspect a variety of metahuman skulls."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 18
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: 12
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a6"
    }
  }
  branches {
    responseText: "{{CC}}Etiquette: Socialite{{/CC}} Are you a Beaumont of the Atherford Beaumonts? We\342\200\231ve heard of your impeccable heritage. We are not worthy, but wish to assist however we may."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 16
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: 13
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a9"
    }
  }
  branches {
    responseText: "The XO asked us to help your search."
    nextNodeIndex: 14
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566ac"
    }
  }
  branches {
    responseText: "We work here."
    nextNodeIndex: 15
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566af"
    }
  }
  branches {
    responseText: "So\342\200\246. I take it you did NOT order a pizza?"
    nextNodeIndex: 16
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b2"
    }
  }
  branches {
    responseText: "I\342\200\231m ending your horrible existence and proving the superiority of metahumanity. {{GM}}Attack.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Influence_Isas_Revenge"
            }
          }
        }
      }
      ops {
        functionName: "Enable/Disable Trigger"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "EnableOrDisable"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Trigger)"
            args {
              string_value: "59d2aff8643431fa5bb565b3"
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b5"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a7"
  }
  index: 12
  text: "I have not directly dabbled, but I do follow the research, albeit from a distance. I appreciate the offer, if not the timing."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566a8"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566aa"
  }
  index: 13
  text: "Yes, yes. I\342\200\231ve had quite enough of well-wishers and hangers-on. If you cannot put in the work, do not expect any rewards."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566ab"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566ad"
  }
  index: 14
  text: "And she really thought you could help?"
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566ae"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b0"
  }
  index: 15
  text: "That explains much, and not to my satisfaction."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b1"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b3"
  }
  index: 16
  text: "What?! No! Of course not!"
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb566b4"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2af6d643431c55bb566f3"
  }
  index: 17
  text: "What is it now?"
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2af6f643431c55bb566f5"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af6f643431c55bb566f7"
  }
  index: 18
  text: ""
  branches {
    responseText: "What are you doing on Treasure Island?"
    nextNodeIndex: 19
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b024643431fa5bb565f7"
    }
  }
  branches {
    responseText: "What\342\200\231s in those files?"
    nextNodeIndex: 27
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5d1643431fa5bb5677c"
    }
  }
  branches {
    responseText: "You\342\200\231re a part of Human Nation, right?"
    nextNodeIndex: 31
    onlyOnce: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b63b643431fa5bb5683e"
    }
  }
  branches {
    responseText: "I\342\200\231d like to see Camelot for myself. Can you help me get to Vandenberg?"
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "Upstairs_HeardOfCamelot"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 36
    hideIfUnavailable: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b6cd643431fa5bb56a0e"
    }
  }
  branches {
    responseText: "I\342\200\231m done with you. {{GM}}Attack.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Influence_Isas_Revenge"
            }
          }
        }
      }
      ops {
        functionName: "Enable/Disable Trigger"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "EnableOrDisable"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Trigger)"
            args {
              string_value: "59d2aff8643431fa5bb565b3"
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2beb2643431485eb566f2"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Root node"
}
nodes {
  idRef {
    id: "59d2b028643431fa5bb565fa"
  }
  index: 19
  text: "We have grown concerned with the difficulty Keiji Saito and Gavan Banain have had in wiping out the resistance in the Bay Area.\n\nThe rest of California has fallen fairly easily, but even though Saito has occupied these lands for decades, the metahumans remain stubbornly noncompliant."
  branches {
    responseText: ""
    nextNodeIndex: 20
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b028643431fa5bb565fc"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b028643431fa5bb565fe"
  }
  index: 20
  text: "Do you have any theories? Why has the Protectorate failed to fully implement its admirable policies in the Bay Area?"
  branches {
    responseText: "It\342\200\231s evidence that disproves your ideology. Humans are not superior to metahumans."
    nextNodeIndex: 21
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b02d643431fa5bb56602"
    }
  }
  branches {
    responseText: "It proves that there is a traitor in Saito\342\200\231s organization."
    nextNodeIndex: 22
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b542643431fa5bb56663"
    }
  }
  branches {
    responseText: "It shows that Saito is weak."
    nextNodeIndex: 23
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb5666c"
    }
  }
  branches {
    responseText: "Local humans, outside of the Protectorate, must be secretly supporting the local metahumans."
    nextNodeIndex: 24
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb56672"
    }
  }
  branches {
    responseText: "Hell if I know."
    nextNodeIndex: 25
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b548643431fa5bb56678"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b51e643431fa5bb56659"
  }
  index: 21
  text: "\342\200\246 No. Human civilization has ruled strongly for six thousand years, and metahumans are only a corrupt shadow. Some other force must be at work."
  branches {
    responseText: ""
    nextNodeIndex: 25
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b520643431fa5bb5665b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "TODO: Suspicion?"
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b542643431fa5bb56665"
  }
  index: 22
  text: "You are smarter than you first appear. That is indeed the most logical conclusion."
  branches {
    responseText: ""
    nextNodeIndex: 25
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b542643431fa5bb56667"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb5666e"
  }
  index: 23
  text: "I can see why an outsider would think that, but I have utmost faith in Saito himself. While the Yamato Way predates our organization, it shares a similar spirit. Through his actions on Yomi Island and in purifying San Francisco, Saito has shown perfect devotion to the purity of humanity."
  branches {
    responseText: ""
    nextNodeIndex: 25
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb56670"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "TODO: Suspicion?"
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb56674"
  }
  index: 24
  text: "That does seem plausible. Ares, in particular, may have found a way to provide clandestine assistance to these monsters. But it would be difficult to keep such support hidden for so long."
  branches {
    responseText: ""
    nextNodeIndex: 25
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b544643431fa5bb56676"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b548643431fa5bb5667a"
  }
  index: 25
  text: "A single drop of poison can ruin the entire dish. A single traitor can bring the mightiest army to its knees.\n\nSome human within the Protectorate must have betrayed his race, made common cause with the beasts."
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b548643431fa5bb5667c"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b5b8643431fa5bb566e7"
  }
  index: 26
  text: "We must find him and root him out. The great experiment MUST succeed! We can only succeed in our mission if we are pure in heart, pure in body, pure in soul.\n\nOnce we have purged those who do not embrace our mission, our superior spirit will wipe away all who would oppose us."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5bb643431fa5bb566e9"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b5dd643431fa5bb5677f"
  }
  index: 27
  text: "{{GM}}He lovingly strokes the device.{{/GM}}\n\nCamelot."
  branches {
    responseText: ""
    nextNodeIndex: 28
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5de643431fa5bb56781"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "Upstairs_HeardOfCamelot"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Face Direction"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Triggering Target Actor"
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_interact"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b5de643431fa5bb56783"
  }
  index: 28
  text: "The pathway to a better future. The promise of a pure existence. A gate through which we can travel, and in traveling, transform the world."
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5e1643431fa5bb56787"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Order Actor to Face Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Target Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b5e1643431fa5bb56789"
  }
  index: 29
  text: "Camelot is a dream that shows us our destiny. A place with only man and technology, body and machines.\n\nA land with no monsters, no magic. "
  branches {
    responseText: ""
    nextNodeIndex: 30
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5e2643431fa5bb5678b"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b5e2643431fa5bb5678d"
  }
  index: 30
  text: "A few will soon travel there physically, rising up from Vandenberg towards the stars.\n\nAnd through their actions, they will bring Camelot to the world, so all may behold the splendor of purity."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b5e6643431fa5bb567d5"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b64e643431fa5bb56841"
  }
  index: 31
  text: "Yes. For years we have worked from the shadows, carefully guiding events, whispering in the halls of power, providing funds and knowledge to those who could advance our cause. But now the time is drawing near: our plans approaching fruition, our dreams becoming reality. Soon the name that has only been murmured will be spoken confidently, in every human nation in the world, in every nation on Earth."
  branches {
    responseText: ""
    nextNodeIndex: 32
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b650643431fa5bb56843"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b652643431fa5bb56845"
  }
  index: 32
  text: "California is our first step, halting and unwieldy. But we are learning how to walk. Taking our ideas, testing them, learning what works, what does not. Which levers must be pulled for the best results."
  branches {
    responseText: ""
    nextNodeIndex: 33
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b652643431fa5bb56847"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b658643431fa5bb5684b"
  }
  index: 33
  text: "Once we have learned our lessons here, we will be able to apply them to the whole world. Once again, California will be a leader, a trendsetter, an innovator for others to emulate. After everyone sees the greatness we have accomplished here, events will move even faster, a tsunami sweeping across the ocean."
  branches {
    responseText: ""
    nextNodeIndex: 34
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b658643431fa5bb5684d"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b65a643431fa5bb5684f"
  }
  index: 34
  text: "Saito is our great instrument. He is a pioneer, walking these paths for the first time. Along the way he is discovering technical and political obstacles in his way. More importantly, he is clearing those obstacles away. Sometimes with our aid, often on his own.\n\nAnd we learn so much from him! Lessons we can apply elsewhere on the second nation, the third, the fourth, the dozens that have their own Saitos, their own strong men eagerly awaiting our signal to begin the great work."
  branches {
    responseText: ""
    nextNodeIndex: 35
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b65a643431fa5bb56851"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b65b643431fa5bb56853"
  }
  index: 35
  text: "The Fifth World can be recreated. The clock can be turned back. Mankind will once again assume its proper position, as the ultimate and unchallenged ruler of the world."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b65b643431fa5bb56855"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b6e5643431fa5bb56af7"
  }
  index: 36
  text: "I can certainly understand why you would wish to see its beauty for yourself. But why should I help you? What have you done to deserve this honor?"
  branches {
    responseText: "I know who the traitor is."
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "Upstairs_HeardOfTraitor"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 37
    hideIfUnavailable: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b6e7643431fa5bb56af9"
    }
  }
  branches {
    responseText: "Never mind."
    nextNodeIndex: 48
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bf2b643431485eb568bc"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2b6e8643431fa5bb56afb"
  }
  index: 37
  text: "Indeed? I certainly hope you have evidence to back your claim. I am not inclined to simply accept your words."
  branches {
    responseText: "The traitor is\342\200\246"
    nextNodeIndex: 38
    hideIfUnavailable: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b6e8643431fa5bb56afd"
    }
    comment: "TODO: Must have at least one of the following."
  }
  branches {
    responseText: "I\342\200\231ll get back to you on that."
    nextNodeIndex: 47
    idRef {
      id: "59d2aab76434310359b56fdf:59d2be8e643431485eb566eb"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2b9ed643431885db56791"
  }
  index: 38
  text: "Yes?"
  branches {
    responseText: "{{CC}}Planted Evidence{{/CC}} I can show you messages in the Matrix implicating LtCol Sano."
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "Matrix_PlantedEvidence"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 39
    hideIfUnavailable: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2b9f1643431885db56793"
    }
  }
  branches {
    responseText: "{{CC}}Item: Gavan\342\200\231s Personal Records{{/CC}} You may be interested in these records about Gavan Banain."
    conditions {
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "ss_a6_treasure_s1-GavanRecords"
            }
          }
        }
      }
    }
    nextNodeIndex: 44
    hideIfUnavailable: true
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bcee643431f15db567cc"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2ba25643431885db56888"
  }
  index: 39
  text: "Interesting. In all honesty, she had seemed so incompetent that I had not even considered that she could be colluding with the metahumans. But then again, would not her moral failure in betraying her race manifest together with a mental failure to correctly carry out her job?"
  branches {
    responseText: ""
    nextNodeIndex: 40
    idRef {
      id: "59d2aab76434310359b56fdf:59d2ba28643431885db5688a"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2ba29643431885db5688c"
  }
  index: 40
  text: "Cancers must be cut from the body, quickly and mercilessly. She will not see the sun set."
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "59d2aab76434310359b56fdf:59d2ba29643431885db5688e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2ba36643431885db56892"
  }
  index: 41
  text: "As for you. Against all odds, you have proven some value to our great work. You may still yet provide even more value before the end. I will give you that for which you asked."
  branches {
    responseText: ""
    nextNodeIndex: 42
    idRef {
      id: "59d2aab76434310359b56fdf:59d2ba36643431885db56894"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2ba38643431885db56896"
  }
  index: 42
  text: "These passes will satisfy any Protectorate forces you may encounter en route to Vandenberg. For that matter, they will also satisfy members of Humanis and other interested parties. They will not provide access to the actual shuttle, but perhaps you will be resourceful enough to find your way."
  branches {
    responseText: ""
    nextNodeIndex: 43
    idRef {
      id: "59d2aab76434310359b56fdf:59d2ba38643431885db56898"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "TODO: Give pass, update goal, check for successful stealth"
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2bb85643431885db5699c"
  }
  index: 43
  text: "Now begone. I have far more work to complete, both here and abroad."
  branches {
    responseText: "{{GM}}Leave.{{/GM}}"
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Influence_Isas_Forgiveness"
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bb85643431885db5699e"
    }
  }
  branches {
    responseText: "Goodbye."
    actions {
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Influence_Isas_Forgiveness"
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bc89643431f15db566ba"
    }
  }
  branches {
    responseText: "Smell ya later."
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bc89643431f15db566bc"
    }
  }
  branches {
    responseText: "Now that I have what I need, it\342\200\231s time to end you. {{GM}}Attack.{{/GM}}"
    actions {
      ops {
        functionName: "Enable/Disable Trigger"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "EnableOrDisable"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Trigger)"
            args {
              string_value: "59d2aff8643431fa5bb565b3"
            }
          }
        }
      }
      ops {
        functionName: "Send Event"
        args {
          call_value {
            functionName: "Get Map Item (Event)"
            args {
              string_value: "Event_Influence_Isas_Revenge"
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bc89643431f15db566be"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2be44643431485eb5663c"
  }
  index: 44
  text: "This is very disturbing. Gavan Banain is Saito\342\200\231s right-hand man, the very person who facilitated our meeting in the first place."
  branches {
    responseText: ""
    nextNodeIndex: 45
    idRef {
      id: "59d2aab76434310359b56fdf:59d2be47643431485eb5663e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2be48643431485eb56640"
  }
  index: 45
  text: "I see no evidence that Mr. Banain is a traitor. He has gone to extraordinary lengths to realize our vision, and has rejected the failures in his own life.\n\nBut his moral rot still may be the cause of the Protectorate\342\200\231s weakness."
  branches {
    responseText: ""
    nextNodeIndex: 46
    idRef {
      id: "59d2aab76434310359b56fdf:59d2be48643431485eb56642"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2aab76434310359b56fdf:59d2be53643431485eb56646"
  }
  index: 46
  text: "A disease that starts on a toenail may then infect the toe, and then the foot, and then the body. Even so, the plague of metahumanity that attacked Gavan\342\200\231s son is now threatening him, and by extension the Protectorate.\n\nThe rot must be cut out before the infection can spread and infect the host. We may need to part ways with Mr. Banain and find a new partner, one who is completely free from the taint of the metagene."
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "59d2aab76434310359b56fdf:59d2be53643431485eb56648"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2be98643431485eb566ee"
  }
  index: 47
  text: "I must admit, you have piqued my curiosity."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2be9a643431485eb566f0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "59d2bf30643431485eb568bf"
  }
  index: 48
  text: "Hm?"
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "59d2aab76434310359b56fdf:59d2bf33643431485eb568c1"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
roots {
  nextNodeIndex: 0
  onlyOnce: true
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af5b643431c55bb56687"
  }
}
roots {
  responseText: ""
  nextNodeIndex: 17
  idRef {
    id: "59d2aab76434310359b56fdf:59d2af6a643431c55bb566f0"
  }
}
